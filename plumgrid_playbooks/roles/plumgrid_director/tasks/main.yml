#
# Copyright (c) 2015, PLUMgrid Inc, http://plumgrid.com
#

# Extract License from file
- name: Extract License
  set_fact:
    pg_license: "{{ lookup('file', pg_license_path) }}"

- set_fact:
    license_put_status: "0"
  when: inventory_hostname == groups['infra_hosts'][0]

# Modify template files
- name: Setup Keepalived Config
  template:
    src: keepalived.conf
    dest: /var/lib/libvirt/filesystems/plumgrid-data/conf/etc/keepalived.conf

- name: Setup nginx Config
  template:
    src: default.conf
    dest: /var/lib/libvirt/filesystems/plumgrid-data/conf/pg/nginx.conf

- name: Restart PLUMgrid service
  service:
    name: plumgrid
    state: restarted

- name: Login to PLUMgrid
  shell: >
    curl -H "Accept: application/json" -H "Content-Type: application/json" -k -X POST https://{{ pg_vip }}/0/login -d '{"userName":"plumgrid","password":"plumgrid"}' -c /tmp/cookie -i | grep HTTP | awk '{print $2}'
  when: install_license == True and inventory_hostname == groups['infra_hosts'][0]
  register: login_status
  until: login_status.stdout == '200'
  retries: 5
  delay: 10

- name: Install PLUMgrid License
  shell: >
    curl -H "Accept: application/json" -H "Content-Type: application/json" https://{{ pg_vip }}/0/tenant_manager/license_key/key1 -k -X PUT -d '{"license": "{{pg_license}}"}' -i -b /tmp/cookie -k| grep HTTP | awk '{print $2}'
  ignore_errors: true
  register: license_put_status
  when: install_license == True and inventory_hostname == groups['infra_hosts'][0]
  until: license_put_status.stdout == '200'
  retries: 5
  delay: 10

- fail: msg= "Check if License posted correctly"
  when: install_license == True and inventory_hostname == groups['infra_hosts'][0] and license_put_status.stdout != '200'

- set_fact:
    license_put_status: "{{license_put_status.stdout}}"
  when: install_license == True and inventory_hostname == groups['infra_hosts'][0]

- name: Check PLUMgrid services
  shell: >
    virsh -c lxc: lxc-enter-namespace plumgrid --noseclabel -- /usr/bin/service {{ pg_service_name }} status
  register: pg_lxc_check

- fail: msg= "Fail on non-running services"
  when: pg_lxc_check.stdout.find('start/running') == -1
